version: '3'
services:
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SERVER_HTTP_PORT=3000
      - GF_SERVER_ROOT_URL=http://localhost:3000
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - grafana-network

networks:
  grafana-network:
    driver: bridge

volumes:
  grafana-data:
version: '3'

services:
  grafana:
    image: grafana/grafana:7.4.4
    ports:
      - "3000:3000"
    environment:
      - GF_SERVER_HTTP_PORT=3000
      - GF_SERVER_HOST=localhost
    restart: always
    depends_on:
      - db
    networks:
      - app

  db:
    image: postgres:13
    environment:
      - POSTGRES_USER=grafana
      - POSTGRES_PASSWORD=grafana
      - POSTGRES_DB=grafana
    volumes:
      - db-data:/var/lib/postgresql/data
    restart: always
    networks:
      - app

volumes:
  db-data:

networks:
  app:
    driver: bridge
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
      - name: grafana
        image: grafana/grafana:7.4.4
        ports:
        - containerPort: 3000
        environment:
          - GF_SERVER_HTTP_PORT=3000
          - GF_SERVER_HOST=localhost
        volumeMounts:
        - name: db-data
          mountPath: /var/lib/postgresql/data
      volumes:
      - name: db-data
        persistentVolumeClaim:
          claimName: grafana-db-data
  dependsOn:
  - name: db
    type: Service
  networks:
  - name: app
    type: Ingress

apiVersion: v1
kind: Service
metadata:
  name: db
spec:
  selector:
    app: db
  ports:
  - name: db
    port: 5432
  type: ClusterIP

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-db-data
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
